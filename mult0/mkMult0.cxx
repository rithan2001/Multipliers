/*
 * Generated by Bluespec Compiler (build 9f4a447)
 * 
 * On Sat Jun 13 11:17:50 IST 2020
 * 
 */
#include "bluesim_primitives.h"
#include "mkMult0.h"


/* String declarations */
static std::string const __str_literal_1("Product = %d", 12u);


/* Constructor */
MOD_mkMult0::MOD_mkMult0(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_mcand(simHdl, "mcand", this, 32u, 9u, (tUInt8)0u),
    INST_mplr(simHdl, "mplr", this, 16u, 4u, (tUInt8)0u),
    INST_product(simHdl, "product", this, 32u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 10u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkMult0::init_symbols_0()
{
  init_symbol(&symbols[0u], "CAN_FIRE_RL_cycle", SYM_DEF, &DEF_CAN_FIRE_RL_cycle, 1u);
  init_symbol(&symbols[1u], "CAN_FIRE_RL_done", SYM_DEF, &DEF_CAN_FIRE_RL_done, 1u);
  init_symbol(&symbols[2u], "mcand", SYM_MODULE, &INST_mcand);
  init_symbol(&symbols[3u], "mplr", SYM_MODULE, &INST_mplr);
  init_symbol(&symbols[4u], "product", SYM_MODULE, &INST_product);
  init_symbol(&symbols[5u], "RL_cycle", SYM_RULE);
  init_symbol(&symbols[6u], "RL_done", SYM_RULE);
  init_symbol(&symbols[7u], "WILL_FIRE_RL_cycle", SYM_DEF, &DEF_WILL_FIRE_RL_cycle, 1u);
  init_symbol(&symbols[8u], "WILL_FIRE_RL_done", SYM_DEF, &DEF_WILL_FIRE_RL_done, 1u);
  init_symbol(&symbols[9u], "x__h380", SYM_DEF, &DEF_x__h380, 16u);
}


/* Rule actions */

void MOD_mkMult0::RL_cycle()
{
  tUInt32 DEF_x__h371;
  tUInt32 DEF_x__h353;
  tUInt32 DEF_x__h310;
  tUInt8 DEF_mplr_BIT_0___h296;
  tUInt32 DEF_mplr_BITS_15_TO_1___h377;
  tUInt32 DEF_mcand_BITS_30_TO_0___h366;
  tUInt32 DEF__read__h83;
  DEF__read__h83 = INST_mcand.METH_read();
  DEF__read__h50 = INST_product.METH_read();
  DEF_x__h380 = INST_mplr.METH_read();
  DEF_mcand_BITS_30_TO_0___h366 = (tUInt32)(2147483647u & DEF__read__h83);
  DEF_mplr_BITS_15_TO_1___h377 = (tUInt32)(DEF_x__h380 >> 1u);
  DEF_mplr_BIT_0___h296 = (tUInt8)((tUInt8)1u & DEF_x__h380);
  DEF_x__h310 = DEF__read__h50 + DEF__read__h83;
  DEF_x__h353 = (DEF_mcand_BITS_30_TO_0___h366 << 1u) | (tUInt32)((tUInt8)0u);
  DEF_x__h371 = 65535u & ((((tUInt32)((tUInt8)0u)) << 15u) | DEF_mplr_BITS_15_TO_1___h377);
  if (DEF_mplr_BIT_0___h296)
    INST_product.METH_write(DEF_x__h310);
  INST_mcand.METH_write(DEF_x__h353);
  INST_mplr.METH_write(DEF_x__h371);
}

void MOD_mkMult0::RL_done()
{
  DEF__read__h50 = INST_product.METH_read();
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s,32", &__str_literal_1, DEF__read__h50);
    dollar_finish(sim_hdl, "32", 1u);
  }
}


/* Methods */


/* Reset routines */

void MOD_mkMult0::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_product.reset_RST(ARG_rst_in);
  INST_mplr.reset_RST(ARG_rst_in);
  INST_mcand.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkMult0::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkMult0::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_mcand.dump_state(indent + 2u);
  INST_mplr.dump_state(indent + 2u);
  INST_product.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkMult0::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 10u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_cycle", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_done", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_cycle", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_done", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h50", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h380", 16u);
  num = INST_mcand.dump_VCD_defs(num);
  num = INST_mplr.dump_VCD_defs(num);
  num = INST_product.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkMult0::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkMult0 &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkMult0::vcd_defs(tVCDDumpType dt, MOD_mkMult0 &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 16u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_cycle) != DEF_CAN_FIRE_RL_cycle)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_cycle, 1u);
	backing.DEF_CAN_FIRE_RL_cycle = DEF_CAN_FIRE_RL_cycle;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_done) != DEF_CAN_FIRE_RL_done)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_done, 1u);
	backing.DEF_CAN_FIRE_RL_done = DEF_CAN_FIRE_RL_done;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_cycle) != DEF_WILL_FIRE_RL_cycle)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_cycle, 1u);
	backing.DEF_WILL_FIRE_RL_cycle = DEF_WILL_FIRE_RL_cycle;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_done) != DEF_WILL_FIRE_RL_done)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_done, 1u);
	backing.DEF_WILL_FIRE_RL_done = DEF_WILL_FIRE_RL_done;
      }
      ++num;
      if ((backing.DEF__read__h50) != DEF__read__h50)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h50, 32u);
	backing.DEF__read__h50 = DEF__read__h50;
      }
      ++num;
      if ((backing.DEF_x__h380) != DEF_x__h380)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h380, 16u);
	backing.DEF_x__h380 = DEF_x__h380;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_cycle, 1u);
      backing.DEF_CAN_FIRE_RL_cycle = DEF_CAN_FIRE_RL_cycle;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_done, 1u);
      backing.DEF_CAN_FIRE_RL_done = DEF_CAN_FIRE_RL_done;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_cycle, 1u);
      backing.DEF_WILL_FIRE_RL_cycle = DEF_WILL_FIRE_RL_cycle;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_done, 1u);
      backing.DEF_WILL_FIRE_RL_done = DEF_WILL_FIRE_RL_done;
      vcd_write_val(sim_hdl, num++, DEF__read__h50, 32u);
      backing.DEF__read__h50 = DEF__read__h50;
      vcd_write_val(sim_hdl, num++, DEF_x__h380, 16u);
      backing.DEF_x__h380 = DEF_x__h380;
    }
}

void MOD_mkMult0::vcd_prims(tVCDDumpType dt, MOD_mkMult0 &backing)
{
  INST_mcand.dump_VCD(dt, backing.INST_mcand);
  INST_mplr.dump_VCD(dt, backing.INST_mplr);
  INST_product.dump_VCD(dt, backing.INST_product);
}
