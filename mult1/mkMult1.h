/*
 * Generated by Bluespec Compiler (build 9f4a447)
 * 
 * On Thu Jun 11 14:05:09 IST 2020
 * 
 */

/* Generation options: keep-fires */
#ifndef __mkMult1_h__
#define __mkMult1_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkMult1 module */
class MOD_mkMult1 : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt8> INST_available;
  MOD_Reg<tUInt32> INST_mcand;
  MOD_Reg<tUInt32> INST_mplr;
  MOD_Reg<tUInt32> INST_product;
 
 /* Constructor */
 public:
  MOD_mkMult1(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUInt8 PORT_EN_start;
  tUInt8 PORT_EN_acknowledge;
  tUInt32 PORT_start_m1;
  tUInt32 PORT_start_m2;
  tUInt8 PORT_RDY_start;
  tUInt32 PORT_result;
  tUInt8 PORT_RDY_result;
  tUInt8 PORT_RDY_acknowledge;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_acknowledge;
  tUInt8 DEF_mplr_EQ_0___d2;
  tUInt8 DEF_WILL_FIRE_start;
  tUInt8 DEF_WILL_FIRE_RL_cycle;
  tUInt8 DEF_CAN_FIRE_RL_cycle;
  tUInt8 DEF_CAN_FIRE_acknowledge;
  tUInt8 DEF_CAN_FIRE_result;
  tUInt8 DEF_CAN_FIRE_start;
  tUInt8 DEF_available__h341;
  tUInt32 DEF__read__h158;
 
 /* Local definitions */
 private:
  tUInt32 DEF__read__h86;
 
 /* Rules */
 public:
  void RL_cycle();
 
 /* Methods */
 public:
  void METH_start(tUInt32 ARG_start_m1, tUInt32 ARG_start_m2);
  tUInt8 METH_RDY_start();
  tUInt32 METH_result();
  tUInt8 METH_RDY_result();
  void METH_acknowledge();
  tUInt8 METH_RDY_acknowledge();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkMult1 &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkMult1 &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkMult1 &backing);
};

#endif /* ifndef __mkMult1_h__ */
