/*
 * Generated by Bluespec Compiler (build 9f4a447)
 * 
 * On Thu Jun 11 14:05:09 IST 2020
 * 
 */
#include "bluesim_primitives.h"
#include "mkMult1.h"


/* Constructor */
MOD_mkMult1::MOD_mkMult1(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_available(simHdl, "available", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_mcand(simHdl, "mcand", this, 32u, 2863311530u, (tUInt8)0u),
    INST_mplr(simHdl, "mplr", this, 16u, 0u, (tUInt8)0u),
    INST_product(simHdl, "product", this, 32u, 2863311530u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  PORT_EN_start = false;
  PORT_EN_acknowledge = false;
  PORT_start_m1 = 0u;
  PORT_start_m2 = 0u;
  PORT_RDY_start = false;
  PORT_result = 0u;
  PORT_RDY_result = false;
  PORT_RDY_acknowledge = false;
  symbol_count = 22u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkMult1::init_symbols_0()
{
  init_symbol(&symbols[0u], "_read__h158", SYM_DEF, &DEF__read__h158, 16u);
  init_symbol(&symbols[1u], "available", SYM_MODULE, &INST_available);
  init_symbol(&symbols[2u], "available__h341", SYM_DEF, &DEF_available__h341, 1u);
  init_symbol(&symbols[3u], "CAN_FIRE_acknowledge", SYM_DEF, &DEF_CAN_FIRE_acknowledge, 1u);
  init_symbol(&symbols[4u], "CAN_FIRE_RL_cycle", SYM_DEF, &DEF_CAN_FIRE_RL_cycle, 1u);
  init_symbol(&symbols[5u], "CAN_FIRE_result", SYM_DEF, &DEF_CAN_FIRE_result, 1u);
  init_symbol(&symbols[6u], "CAN_FIRE_start", SYM_DEF, &DEF_CAN_FIRE_start, 1u);
  init_symbol(&symbols[7u], "EN_acknowledge", SYM_PORT, &PORT_EN_acknowledge, 1u);
  init_symbol(&symbols[8u], "EN_start", SYM_PORT, &PORT_EN_start, 1u);
  init_symbol(&symbols[9u], "mcand", SYM_MODULE, &INST_mcand);
  init_symbol(&symbols[10u], "mplr", SYM_MODULE, &INST_mplr);
  init_symbol(&symbols[11u], "product", SYM_MODULE, &INST_product);
  init_symbol(&symbols[12u], "RDY_acknowledge", SYM_PORT, &PORT_RDY_acknowledge, 1u);
  init_symbol(&symbols[13u], "RDY_result", SYM_PORT, &PORT_RDY_result, 1u);
  init_symbol(&symbols[14u], "RDY_start", SYM_PORT, &PORT_RDY_start, 1u);
  init_symbol(&symbols[15u], "RL_cycle", SYM_RULE);
  init_symbol(&symbols[16u], "result", SYM_PORT, &PORT_result, 32u);
  init_symbol(&symbols[17u], "start_m1", SYM_PORT, &PORT_start_m1, 16u);
  init_symbol(&symbols[18u], "start_m2", SYM_PORT, &PORT_start_m2, 16u);
  init_symbol(&symbols[19u], "WILL_FIRE_acknowledge", SYM_DEF, &DEF_WILL_FIRE_acknowledge, 1u);
  init_symbol(&symbols[20u], "WILL_FIRE_RL_cycle", SYM_DEF, &DEF_WILL_FIRE_RL_cycle, 1u);
  init_symbol(&symbols[21u], "WILL_FIRE_start", SYM_DEF, &DEF_WILL_FIRE_start, 1u);
}


/* Rule actions */

void MOD_mkMult1::RL_cycle()
{
  tUInt32 DEF_x__h299;
  tUInt32 DEF_x__h281;
  tUInt32 DEF_x__h238;
  tUInt8 DEF_mplr_BIT_0___h224;
  tUInt32 DEF_mplr_BITS_15_TO_1___h305;
  tUInt32 DEF_mcand_BITS_30_TO_0___h294;
  tUInt32 DEF__read__h122;
  DEF__read__h122 = INST_mcand.METH_read();
  DEF__read__h86 = INST_product.METH_read();
  DEF__read__h158 = INST_mplr.METH_read();
  DEF_mcand_BITS_30_TO_0___h294 = (tUInt32)(2147483647u & DEF__read__h122);
  DEF_mplr_BITS_15_TO_1___h305 = (tUInt32)(DEF__read__h158 >> 1u);
  DEF_mplr_BIT_0___h224 = (tUInt8)((tUInt8)1u & DEF__read__h158);
  DEF_x__h238 = DEF__read__h86 + DEF__read__h122;
  DEF_x__h281 = (DEF_mcand_BITS_30_TO_0___h294 << 1u) | (tUInt32)((tUInt8)0u);
  DEF_x__h299 = 65535u & ((((tUInt32)((tUInt8)0u)) << 15u) | DEF_mplr_BITS_15_TO_1___h305);
  if (DEF_mplr_BIT_0___h224)
    INST_product.METH_write(DEF_x__h238);
  INST_mcand.METH_write(DEF_x__h281);
  INST_mplr.METH_write(DEF_x__h299);
}


/* Methods */

void MOD_mkMult1::METH_start(tUInt32 ARG_start_m1, tUInt32 ARG_start_m2)
{
  tUInt32 DEF_x__h377;
  PORT_EN_start = (tUInt8)1u;
  DEF_WILL_FIRE_start = (tUInt8)1u;
  PORT_start_m1 = ARG_start_m1;
  PORT_start_m2 = ARG_start_m2;
  DEF_x__h377 = ARG_start_m1;
  INST_product.METH_write(0u);
  INST_mcand.METH_write(DEF_x__h377);
  INST_mplr.METH_write(ARG_start_m2);
  INST_available.METH_write((tUInt8)0u);
}

tUInt8 MOD_mkMult1::METH_RDY_start()
{
  DEF_available__h341 = INST_available.METH_read();
  DEF__read__h158 = INST_mplr.METH_read();
  DEF_mplr_EQ_0___d2 = DEF__read__h158 == 0u;
  DEF_CAN_FIRE_start = DEF_mplr_EQ_0___d2 && DEF_available__h341;
  PORT_RDY_start = DEF_CAN_FIRE_start;
  return PORT_RDY_start;
}

tUInt32 MOD_mkMult1::METH_result()
{
  DEF__read__h86 = INST_product.METH_read();
  PORT_result = DEF__read__h86;
  return PORT_result;
}

tUInt8 MOD_mkMult1::METH_RDY_result()
{
  DEF__read__h158 = INST_mplr.METH_read();
  DEF_mplr_EQ_0___d2 = DEF__read__h158 == 0u;
  DEF_CAN_FIRE_result = DEF_mplr_EQ_0___d2;
  PORT_RDY_result = DEF_CAN_FIRE_result;
  return PORT_RDY_result;
}

void MOD_mkMult1::METH_acknowledge()
{
  PORT_EN_acknowledge = (tUInt8)1u;
  DEF_WILL_FIRE_acknowledge = (tUInt8)1u;
  INST_available.METH_write((tUInt8)1u);
}

tUInt8 MOD_mkMult1::METH_RDY_acknowledge()
{
  DEF_available__h341 = INST_available.METH_read();
  DEF__read__h158 = INST_mplr.METH_read();
  DEF_mplr_EQ_0___d2 = DEF__read__h158 == 0u;
  DEF_CAN_FIRE_acknowledge = DEF_mplr_EQ_0___d2 && !DEF_available__h341;
  PORT_RDY_acknowledge = DEF_CAN_FIRE_acknowledge;
  return PORT_RDY_acknowledge;
}


/* Reset routines */

void MOD_mkMult1::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_product.reset_RST(ARG_rst_in);
  INST_mplr.reset_RST(ARG_rst_in);
  INST_mcand.reset_RST(ARG_rst_in);
  INST_available.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkMult1::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkMult1::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_available.dump_state(indent + 2u);
  INST_mcand.dump_state(indent + 2u);
  INST_mplr.dump_state(indent + 2u);
  INST_product.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkMult1::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 24u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_cycle", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_acknowledge", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_result", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_start", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_cycle", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_acknowledge", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_start", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h158", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h86", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "available__h341", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "mplr_EQ_0___d2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_acknowledge", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_start", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_acknowledge", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_result", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_start", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "result", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "start_m1", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "start_m2", 16u);
  num = INST_available.dump_VCD_defs(num);
  num = INST_mcand.dump_VCD_defs(num);
  num = INST_mplr.dump_VCD_defs(num);
  num = INST_product.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkMult1::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkMult1 &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkMult1::vcd_defs(tVCDDumpType dt, MOD_mkMult1 &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 16u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_cycle) != DEF_CAN_FIRE_RL_cycle)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_cycle, 1u);
	backing.DEF_CAN_FIRE_RL_cycle = DEF_CAN_FIRE_RL_cycle;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_acknowledge) != DEF_CAN_FIRE_acknowledge)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_acknowledge, 1u);
	backing.DEF_CAN_FIRE_acknowledge = DEF_CAN_FIRE_acknowledge;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_result) != DEF_CAN_FIRE_result)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_result, 1u);
	backing.DEF_CAN_FIRE_result = DEF_CAN_FIRE_result;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_start) != DEF_CAN_FIRE_start)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_start, 1u);
	backing.DEF_CAN_FIRE_start = DEF_CAN_FIRE_start;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_cycle) != DEF_WILL_FIRE_RL_cycle)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_cycle, 1u);
	backing.DEF_WILL_FIRE_RL_cycle = DEF_WILL_FIRE_RL_cycle;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_acknowledge) != DEF_WILL_FIRE_acknowledge)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_acknowledge, 1u);
	backing.DEF_WILL_FIRE_acknowledge = DEF_WILL_FIRE_acknowledge;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_start) != DEF_WILL_FIRE_start)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_start, 1u);
	backing.DEF_WILL_FIRE_start = DEF_WILL_FIRE_start;
      }
      ++num;
      if ((backing.DEF__read__h158) != DEF__read__h158)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h158, 16u);
	backing.DEF__read__h158 = DEF__read__h158;
      }
      ++num;
      if ((backing.DEF__read__h86) != DEF__read__h86)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h86, 32u);
	backing.DEF__read__h86 = DEF__read__h86;
      }
      ++num;
      if ((backing.DEF_available__h341) != DEF_available__h341)
      {
	vcd_write_val(sim_hdl, num, DEF_available__h341, 1u);
	backing.DEF_available__h341 = DEF_available__h341;
      }
      ++num;
      if ((backing.DEF_mplr_EQ_0___d2) != DEF_mplr_EQ_0___d2)
      {
	vcd_write_val(sim_hdl, num, DEF_mplr_EQ_0___d2, 1u);
	backing.DEF_mplr_EQ_0___d2 = DEF_mplr_EQ_0___d2;
      }
      ++num;
      if ((backing.PORT_EN_acknowledge) != PORT_EN_acknowledge)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_acknowledge, 1u);
	backing.PORT_EN_acknowledge = PORT_EN_acknowledge;
      }
      ++num;
      if ((backing.PORT_EN_start) != PORT_EN_start)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_start, 1u);
	backing.PORT_EN_start = PORT_EN_start;
      }
      ++num;
      if ((backing.PORT_RDY_acknowledge) != PORT_RDY_acknowledge)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_acknowledge, 1u);
	backing.PORT_RDY_acknowledge = PORT_RDY_acknowledge;
      }
      ++num;
      if ((backing.PORT_RDY_result) != PORT_RDY_result)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_result, 1u);
	backing.PORT_RDY_result = PORT_RDY_result;
      }
      ++num;
      if ((backing.PORT_RDY_start) != PORT_RDY_start)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_start, 1u);
	backing.PORT_RDY_start = PORT_RDY_start;
      }
      ++num;
      if ((backing.PORT_result) != PORT_result)
      {
	vcd_write_val(sim_hdl, num, PORT_result, 32u);
	backing.PORT_result = PORT_result;
      }
      ++num;
      if ((backing.PORT_start_m1) != PORT_start_m1)
      {
	vcd_write_val(sim_hdl, num, PORT_start_m1, 16u);
	backing.PORT_start_m1 = PORT_start_m1;
      }
      ++num;
      if ((backing.PORT_start_m2) != PORT_start_m2)
      {
	vcd_write_val(sim_hdl, num, PORT_start_m2, 16u);
	backing.PORT_start_m2 = PORT_start_m2;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_cycle, 1u);
      backing.DEF_CAN_FIRE_RL_cycle = DEF_CAN_FIRE_RL_cycle;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_acknowledge, 1u);
      backing.DEF_CAN_FIRE_acknowledge = DEF_CAN_FIRE_acknowledge;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_result, 1u);
      backing.DEF_CAN_FIRE_result = DEF_CAN_FIRE_result;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_start, 1u);
      backing.DEF_CAN_FIRE_start = DEF_CAN_FIRE_start;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_cycle, 1u);
      backing.DEF_WILL_FIRE_RL_cycle = DEF_WILL_FIRE_RL_cycle;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_acknowledge, 1u);
      backing.DEF_WILL_FIRE_acknowledge = DEF_WILL_FIRE_acknowledge;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_start, 1u);
      backing.DEF_WILL_FIRE_start = DEF_WILL_FIRE_start;
      vcd_write_val(sim_hdl, num++, DEF__read__h158, 16u);
      backing.DEF__read__h158 = DEF__read__h158;
      vcd_write_val(sim_hdl, num++, DEF__read__h86, 32u);
      backing.DEF__read__h86 = DEF__read__h86;
      vcd_write_val(sim_hdl, num++, DEF_available__h341, 1u);
      backing.DEF_available__h341 = DEF_available__h341;
      vcd_write_val(sim_hdl, num++, DEF_mplr_EQ_0___d2, 1u);
      backing.DEF_mplr_EQ_0___d2 = DEF_mplr_EQ_0___d2;
      vcd_write_val(sim_hdl, num++, PORT_EN_acknowledge, 1u);
      backing.PORT_EN_acknowledge = PORT_EN_acknowledge;
      vcd_write_val(sim_hdl, num++, PORT_EN_start, 1u);
      backing.PORT_EN_start = PORT_EN_start;
      vcd_write_val(sim_hdl, num++, PORT_RDY_acknowledge, 1u);
      backing.PORT_RDY_acknowledge = PORT_RDY_acknowledge;
      vcd_write_val(sim_hdl, num++, PORT_RDY_result, 1u);
      backing.PORT_RDY_result = PORT_RDY_result;
      vcd_write_val(sim_hdl, num++, PORT_RDY_start, 1u);
      backing.PORT_RDY_start = PORT_RDY_start;
      vcd_write_val(sim_hdl, num++, PORT_result, 32u);
      backing.PORT_result = PORT_result;
      vcd_write_val(sim_hdl, num++, PORT_start_m1, 16u);
      backing.PORT_start_m1 = PORT_start_m1;
      vcd_write_val(sim_hdl, num++, PORT_start_m2, 16u);
      backing.PORT_start_m2 = PORT_start_m2;
    }
}

void MOD_mkMult1::vcd_prims(tVCDDumpType dt, MOD_mkMult1 &backing)
{
  INST_available.dump_VCD(dt, backing.INST_available);
  INST_mcand.dump_VCD(dt, backing.INST_mcand);
  INST_mplr.dump_VCD(dt, backing.INST_mplr);
  INST_product.dump_VCD(dt, backing.INST_product);
}
