/*
 * Generated by Bluespec Compiler (build 9f4a447)
 * 
 * On Thu Jun 11 14:05:09 IST 2020
 * 
 */
#include "bluesim_primitives.h"
#include "mkMult1Tb.h"


/* String declarations */
static std::string const __str_literal_2("    Result = %d", 15u);
static std::string const __str_literal_1("    x = %d, y = %d", 18u);


/* Constructor */
MOD_mkMult1Tb::MOD_mkMult1Tb(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_dut(simHdl, "dut", this),
    INST_x(simHdl, "x", this, 16u, 4u, (tUInt8)0u),
    INST_y(simHdl, "y", this, 16u, 5u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 13u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkMult1Tb::init_symbols_0()
{
  init_symbol(&symbols[0u], "CAN_FIRE_RL_rule_tb_1", SYM_DEF, &DEF_CAN_FIRE_RL_rule_tb_1, 1u);
  init_symbol(&symbols[1u], "CAN_FIRE_RL_rule_tb_2", SYM_DEF, &DEF_CAN_FIRE_RL_rule_tb_2, 1u);
  init_symbol(&symbols[2u], "CAN_FIRE_RL_stop", SYM_DEF, &DEF_CAN_FIRE_RL_stop, 1u);
  init_symbol(&symbols[3u], "dut", SYM_MODULE, &INST_dut);
  init_symbol(&symbols[4u], "RL_rule_tb_1", SYM_RULE);
  init_symbol(&symbols[5u], "RL_rule_tb_2", SYM_RULE);
  init_symbol(&symbols[6u], "RL_stop", SYM_RULE);
  init_symbol(&symbols[7u], "WILL_FIRE_RL_rule_tb_1", SYM_DEF, &DEF_WILL_FIRE_RL_rule_tb_1, 1u);
  init_symbol(&symbols[8u], "WILL_FIRE_RL_rule_tb_2", SYM_DEF, &DEF_WILL_FIRE_RL_rule_tb_2, 1u);
  init_symbol(&symbols[9u], "WILL_FIRE_RL_stop", SYM_DEF, &DEF_WILL_FIRE_RL_stop, 1u);
  init_symbol(&symbols[10u], "x", SYM_MODULE, &INST_x);
  init_symbol(&symbols[11u], "x__h318", SYM_DEF, &DEF_x__h318, 16u);
  init_symbol(&symbols[12u], "y", SYM_MODULE, &INST_y);
}


/* Rule actions */

void MOD_mkMult1Tb::RL_rule_tb_1()
{
  tUInt32 DEF_x__h262;
  tUInt32 DEF_x__h231;
  tUInt32 DEF_x__h266;
  DEF_x__h266 = INST_y.METH_read();
  DEF_x__h318 = INST_x.METH_read();
  DEF_x__h231 = 65535u & (DEF_x__h318 + 1u);
  DEF_x__h262 = 65535u & (DEF_x__h266 + 1u);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,16,16", &__str_literal_1, DEF_x__h318, DEF_x__h266);
  INST_dut.METH_start(DEF_x__h318, DEF_x__h266);
  INST_x.METH_write(DEF_x__h231);
  INST_y.METH_write(DEF_x__h262);
}

void MOD_mkMult1Tb::RL_rule_tb_2()
{
  tUInt32 DEF_z__h278;
  DEF_z__h278 = INST_dut.METH_result();
  INST_dut.METH_acknowledge();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,32", &__str_literal_2, DEF_z__h278);
}

void MOD_mkMult1Tb::RL_stop()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 0u);
}


/* Methods */


/* Reset routines */

void MOD_mkMult1Tb::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_y.reset_RST(ARG_rst_in);
  INST_x.reset_RST(ARG_rst_in);
  INST_dut.reset_RST_N(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkMult1Tb::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkMult1Tb::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_dut.dump_state(indent + 2u);
  INST_x.dump_state(indent + 2u);
  INST_y.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkMult1Tb::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 10u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rule_tb_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rule_tb_2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_stop", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rule_tb_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rule_tb_2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_stop", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h318", 16u);
  num = INST_x.dump_VCD_defs(num);
  num = INST_y.dump_VCD_defs(num);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_dut.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkMult1Tb::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkMult1Tb &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkMult1Tb::vcd_defs(tVCDDumpType dt, MOD_mkMult1Tb &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 16u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_rule_tb_1) != DEF_CAN_FIRE_RL_rule_tb_1)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rule_tb_1, 1u);
	backing.DEF_CAN_FIRE_RL_rule_tb_1 = DEF_CAN_FIRE_RL_rule_tb_1;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rule_tb_2) != DEF_CAN_FIRE_RL_rule_tb_2)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rule_tb_2, 1u);
	backing.DEF_CAN_FIRE_RL_rule_tb_2 = DEF_CAN_FIRE_RL_rule_tb_2;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_stop) != DEF_CAN_FIRE_RL_stop)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_stop, 1u);
	backing.DEF_CAN_FIRE_RL_stop = DEF_CAN_FIRE_RL_stop;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rule_tb_1) != DEF_WILL_FIRE_RL_rule_tb_1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rule_tb_1, 1u);
	backing.DEF_WILL_FIRE_RL_rule_tb_1 = DEF_WILL_FIRE_RL_rule_tb_1;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rule_tb_2) != DEF_WILL_FIRE_RL_rule_tb_2)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rule_tb_2, 1u);
	backing.DEF_WILL_FIRE_RL_rule_tb_2 = DEF_WILL_FIRE_RL_rule_tb_2;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_stop) != DEF_WILL_FIRE_RL_stop)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_stop, 1u);
	backing.DEF_WILL_FIRE_RL_stop = DEF_WILL_FIRE_RL_stop;
      }
      ++num;
      if ((backing.DEF_x__h318) != DEF_x__h318)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h318, 16u);
	backing.DEF_x__h318 = DEF_x__h318;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rule_tb_1, 1u);
      backing.DEF_CAN_FIRE_RL_rule_tb_1 = DEF_CAN_FIRE_RL_rule_tb_1;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rule_tb_2, 1u);
      backing.DEF_CAN_FIRE_RL_rule_tb_2 = DEF_CAN_FIRE_RL_rule_tb_2;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_stop, 1u);
      backing.DEF_CAN_FIRE_RL_stop = DEF_CAN_FIRE_RL_stop;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rule_tb_1, 1u);
      backing.DEF_WILL_FIRE_RL_rule_tb_1 = DEF_WILL_FIRE_RL_rule_tb_1;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rule_tb_2, 1u);
      backing.DEF_WILL_FIRE_RL_rule_tb_2 = DEF_WILL_FIRE_RL_rule_tb_2;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_stop, 1u);
      backing.DEF_WILL_FIRE_RL_stop = DEF_WILL_FIRE_RL_stop;
      vcd_write_val(sim_hdl, num++, DEF_x__h318, 16u);
      backing.DEF_x__h318 = DEF_x__h318;
    }
}

void MOD_mkMult1Tb::vcd_prims(tVCDDumpType dt, MOD_mkMult1Tb &backing)
{
  INST_x.dump_VCD(dt, backing.INST_x);
  INST_y.dump_VCD(dt, backing.INST_y);
}

void MOD_mkMult1Tb::vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkMult1Tb &backing)
{
  INST_dut.dump_VCD(dt, levels, backing.INST_dut);
}
